{"ast":null,"code":"import { Pipe, NgModule } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\nlet OrderPipe = /*#__PURE__*/(() => {\n  class OrderPipe {\n    /**\n     * Check if a value is a string\n     *\n     * @param value\n     */\n    static isString(value) {\n      return typeof value === \"string\" || value instanceof String;\n    }\n    /**\n     * Sorts values ignoring the case\n     *\n     * @param a\n     * @param b\n     */\n\n\n    static caseInsensitiveSort(a, b) {\n      if (OrderPipe.isString(a) && OrderPipe.isString(b)) {\n        return a.localeCompare(b);\n      }\n\n      return OrderPipe.defaultCompare(a, b);\n    }\n    /**\n     * Default compare method\n     *\n     * @param a\n     * @param b\n     */\n\n\n    static defaultCompare(a, b) {\n      if (a && a instanceof Date) {\n        a = a.getTime();\n      }\n\n      if (b && b instanceof Date) {\n        b = b.getTime();\n      }\n\n      if (a === b) {\n        return 0;\n      }\n\n      if (a == null) {\n        return 1;\n      }\n\n      if (b == null) {\n        return -1;\n      }\n\n      return a > b ? 1 : -1;\n    }\n    /**\n     * Parse expression, split into items\n     * @param expression\n     * @returns {string[]}\n     */\n\n\n    static parseExpression(expression) {\n      expression = expression.replace(/\\[(\\w+)\\]/g, \".$1\");\n      expression = expression.replace(/^\\./, \"\");\n      return expression.split(\".\");\n    }\n    /**\n     * Get value by expression\n     *\n     * @param object\n     * @param expression\n     * @returns {any}\n     */\n\n\n    static getValue(object, expression) {\n      for (let i = 0, n = expression.length; i < n; ++i) {\n        if (!object) {\n          return;\n        }\n\n        const k = expression[i];\n\n        if (!(k in object)) {\n          return;\n        }\n\n        if (typeof object[k] === \"function\") {\n          object = object[k]();\n        } else {\n          object = object[k];\n        }\n      }\n\n      return object;\n    }\n    /**\n     * Set value by expression\n     *\n     * @param object\n     * @param value\n     * @param expression\n     */\n\n\n    static setValue(object, value, expression) {\n      let i;\n\n      for (i = 0; i < expression.length - 1; i++) {\n        object = object[expression[i]];\n      }\n\n      object[expression[i]] = value;\n    }\n\n    transform(value, expression, reverse, isCaseInsensitive = false, comparator) {\n      if (!value) {\n        return value;\n      }\n\n      if (Array.isArray(expression)) {\n        return this.multiExpressionTransform(value, expression, reverse, isCaseInsensitive, comparator);\n      }\n\n      if (Array.isArray(value)) {\n        return this.sortArray(value.slice(), expression, reverse, isCaseInsensitive, comparator);\n      }\n\n      if (typeof value === \"object\") {\n        return this.transformObject(Object.assign({}, value), expression, reverse, isCaseInsensitive, comparator);\n      }\n\n      return value;\n    }\n    /**\n     * Sort array\n     *\n     * @param value\n     * @param expression\n     * @param reverse\n     * @param isCaseInsensitive\n     * @param comparator\n     * @returns {any[]}\n     */\n\n\n    sortArray(value, expression, reverse, isCaseInsensitive, comparator) {\n      const isDeepLink = expression && expression.indexOf(\".\") !== -1;\n\n      if (isDeepLink) {\n        expression = OrderPipe.parseExpression(expression);\n      }\n\n      let compareFn;\n\n      if (comparator && typeof comparator === \"function\") {\n        compareFn = comparator;\n      } else {\n        compareFn = isCaseInsensitive ? OrderPipe.caseInsensitiveSort : OrderPipe.defaultCompare;\n      }\n\n      const array = value.sort((a, b) => {\n        if (!expression) {\n          return compareFn(a, b);\n        }\n\n        if (!isDeepLink) {\n          if (a && b) {\n            return compareFn(a[expression], b[expression]);\n          }\n\n          return compareFn(a, b);\n        }\n\n        return compareFn(OrderPipe.getValue(a, expression), OrderPipe.getValue(b, expression));\n      });\n\n      if (reverse) {\n        return array.reverse();\n      }\n\n      return array;\n    }\n    /**\n     * Transform Object\n     *\n     * @param value\n     * @param expression\n     * @param reverse\n     * @param isCaseInsensitive\n     * @param comparator\n     * @returns {any[]}\n     */\n\n\n    transformObject(value, expression, reverse, isCaseInsensitive, comparator) {\n      const parsedExpression = OrderPipe.parseExpression(expression);\n      let lastPredicate = parsedExpression.pop();\n      let oldValue = OrderPipe.getValue(value, parsedExpression);\n\n      if (!Array.isArray(oldValue)) {\n        parsedExpression.push(lastPredicate);\n        lastPredicate = null;\n        oldValue = OrderPipe.getValue(value, parsedExpression);\n      }\n\n      if (!oldValue) {\n        return value;\n      }\n\n      OrderPipe.setValue(value, this.transform(oldValue, lastPredicate, reverse, isCaseInsensitive), parsedExpression);\n      return value;\n    }\n    /**\n     * Apply multiple expressions\n     *\n     * @param value\n     * @param {any[]} expressions\n     * @param {boolean} reverse\n     * @param {boolean} isCaseInsensitive\n     * @param {Function} comparator\n     * @returns {any}\n     */\n\n\n    multiExpressionTransform(value, expressions, reverse, isCaseInsensitive = false, comparator) {\n      return expressions.reverse().reduce((result, expression) => {\n        return this.transform(result, expression, reverse, isCaseInsensitive, comparator);\n      }, value);\n    }\n\n  }\n\n  OrderPipe.ɵfac = function OrderPipe_Factory(t) {\n    return new (t || OrderPipe)();\n  };\n\n  OrderPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"orderBy\",\n    type: OrderPipe,\n    pure: false\n  });\n  return OrderPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Created by vadimdez on 20/01/2017.\n */\n\n\nlet OrderModule = /*#__PURE__*/(() => {\n  class OrderModule {}\n\n  OrderModule.ɵfac = function OrderModule_Factory(t) {\n    return new (t || OrderModule)();\n  };\n\n  OrderModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: OrderModule\n  });\n  OrderModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [OrderPipe]\n  });\n  return OrderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OrderModule, {\n    declarations: [OrderPipe],\n    exports: [OrderPipe]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { OrderModule, OrderPipe }; //# sourceMappingURL=ngx-order-pipe.js.map","map":null,"metadata":{},"sourceType":"module"}